[gd_scene load_steps=8 format=3 uid="uid://d0ibbb4m6d486"]

[ext_resource type="Theme" uid="uid://dyco6ncgsxu3m" path="res://Themes/editor.tres" id="1_bo1nx"]
[ext_resource type="PackedScene" uid="uid://cd1xggw5wy8wq" path="res://Scenes/editor.tscn" id="1_jjgbg"]
[ext_resource type="PackedScene" uid="uid://cvj60qdn0mft7" path="res://Scenes/theme_confirm.tscn" id="3_8gbba"]
[ext_resource type="PackedScene" uid="uid://cg03q3055q3ee" path="res://Scenes/message_window.tscn" id="4_jjvhh"]

[sub_resource type="GDScript" id="GDScript_bo1nx"]
resource_name = "main"
script/source = "extends Node

@export var editor_configs: EditorConfig

var new_version : int
var machine = 0

var editor = preload(\"res://Scenes/editor.tscn\")
var file = preload(\"res://Scenes/file.tscn\")

var custom_cursor = preload(\"res://Sprites/Cursor/cursor.png\")
var ibeam_cursor = preload(\"res://Sprites/Cursor/ibeam.png\")
var hand_cursor = preload(\"res://Sprites/Cursor/hand.png\")
var hsize_cursor = preload(\"res://Sprites/Cursor/hsize.png\")
var vsize_cursor = preload(\"res://Sprites/Cursor/vsize.png\")
var bdiagsize_cursor = preload(\"res://Sprites/Cursor/bdiagsize.png\")
var fdiagsize_cursor = preload(\"res://Sprites/Cursor/fdiagsize.png\")
# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	
	# 链接窗口信号
	get_tree().root.focus_exited.connect(_on_window_focus_exited)
	
	editor_configs = load_from_file()
	apply_config()
	
	new_version = editor_configs.current_version
	
	machine = %MachineManager.import_machine
	
	# 重写关闭窗口按钮
	get_tree().auto_accept_quit = false
	get_viewport().get_window().close_requested.connect(_on_window_close_requested)
	
	# 传递节点引用
	%Untitled.reset_nodes(%Dragging)
	
	# 设置鼠标指针
	Input.set_custom_mouse_cursor( custom_cursor, Input.CURSOR_ARROW, Vector2(32,32) )
	Input.set_custom_mouse_cursor( ibeam_cursor, Input.CURSOR_IBEAM, Vector2(32,32) )
	Input.set_custom_mouse_cursor( hand_cursor, Input.CURSOR_POINTING_HAND, Vector2(32,32) )
	Input.set_custom_mouse_cursor( vsize_cursor, Input.CURSOR_VSIZE, Vector2(32,32) )
	Input.set_custom_mouse_cursor( hsize_cursor, Input.CURSOR_HSIZE, Vector2(32,32) )
	Input.set_custom_mouse_cursor( bdiagsize_cursor, 11, Vector2(32,32) )
	Input.set_custom_mouse_cursor( fdiagsize_cursor, 12, Vector2(32,32) )
	# 连接MenuButton的信号
	%Files.get_popup().id_pressed.connect(_on_files_pressed)



func _on_files_pressed(index):
	
	if index == 0:
		
		new_editor()
	
	elif index == 1:
		
		%FileDialog.file_mode = 4
		%FileDialog.visible = true
	
	elif index == 2:
		
		%FileDialog.file_mode = 4
		%FileDialog.visible = true
	
	elif index == 3:
		
		%FileDialog.file_mode = 0
		%FileDialog.visible = true
	
	elif index == 4:
		
		new_editor()
		%Editors.get_child(%Editors.current_tab).read_from_clipboard()
	
	elif index == 5:
		
		%Editors.get_child(%Editors.current_tab).bind_confirm()
	
	pass


func new_editor():
	
	var editor_node = editor.instantiate()
	var editor_name = \"Untitled\"
	var editor_count = 1
		
	%Editors.add_child(editor_node)
	%Editors.current_tab = editor_node.get_index()
		
	while %Editors.has_node(editor_name + str(editor_count)):
		editor_count += 1

	editor_node.name = editor_name + str(editor_count)
	editor_node.reset_nodes(%Dragging)


func _on_compile_button_pressed() -> void:
	%Editors.get_child(%Editors.current_tab).compile()
	
	pass # Replace with function body.


func _on_file_pressed() -> void:
	
	new_file()
	
	
	pass # Replace with function body.
	

func new_file():
	var file_node = file.instantiate()
	var file_name = \"File\"
	var file_count = 1
		
	%Editors.add_child(file_node)
	%Editors.current_tab = file_node.get_index()
		
	while %Editors.has_node(file_name + str(file_count)):
		file_count += 1

	file_node.name = file_name + str(file_count)

func _on_window_close_requested():
	%ConfirmCloseApp.visible = true
	get_window().grab_focus()
	pass

func _on_confirm_close_app_confirmed(edit) -> void:
	get_tree().quit()
	pass # Replace with function body.

func save_to_file(content: EditorConfig):
	
	var file = FileAccess.open(\"user://config.txt\", FileAccess.WRITE)
	file.store_string( str( content.save_file() ) )

func load_from_file():
	
	if FileAccess.file_exists(\"user://config.txt\"):
		var file = FileAccess.open(\"user://config.txt\", FileAccess.READ)
		var content = file.get_as_text()
		var content_config = EditorConfig.new()
		if not content_config.load_file(content):
			save_to_file(content_config)
		
		return content_config
	
	else:
		var content_config = EditorConfig.new()
		
		save_to_file(content_config)
		return load_from_file()

func _on_window_focus_exited():
	if editor_configs.compile_when_close:
		%Editors.get_child(%Editors.current_tab).compile()

func apply_config():
	
	# 最大帧率
	Engine.max_fps = editor_configs.max_fps
	# ui缩放
	get_tree().root.content_scale_factor = editor_configs.ui_scale
	
	save_to_file(editor_configs)
	
	



func save_editor(node, path):
	
	set_all_owner(node, node, 0, 64)
	
	var packed_scene = PackedScene.new()
		
	var error = packed_scene.pack( %Editors.get_child(%Editors.current_tab) )
	if error != OK:
		push_error(\"编辑器打包失败：\", str(error))
		return false
	
	
	error = ResourceSaver.save(packed_scene, path)
	if error != OK:
		push_error(\"编辑器保存失败：\", str(error))
		return false
	
	print(\"保存了一个编辑器场景到：\", path)
	return true

func load_editor(path):
	if not FileAccess.file_exists(path):
		push_error(\"未在指定目录找到文件：\", path)
		return null
	
	var packed_scene = ResourceLoader.load(path)
	if not packed_scene or not packed_scene is PackedScene:
		push_error(\"指定文件不是有效场景：\", path)
		return null
	
	return packed_scene.instantiate()

func _on_file_dialog_file_selected(path: String) -> void:
	
	if not path.ends_with(\".tscn\"):
		path += \".tscn\"
	
	if %FileDialog.file_mode == 4:
		save_editor(%Editors.get_child(%Editors.current_tab), path)
		
	if %FileDialog.file_mode == 0:
		var scene = load_editor(path)
		if scene:
			%Editors.add_child(scene)

func set_all_owner(node, root, depth, max_depth):
	
	
	for i in node.get_children():
		i.set_owner(root)
		if i.get_child_count() > 0:
			
			if depth > max_depth:
				push_error(\"递归保存错误：深度达限\")
				return false
				
			set_all_owner(i, root, depth + 1, max_depth)
			
	pass


func _on_message_pressed() -> void:
	$MessageWindow.visible = true
	%Message.add_theme_color_override(\"font_color\", Color(\"ffffff\"))
	editor_configs.current_version = new_version
	apply_config()

func _on_message_window_new_message(version) -> void:
	%Message.add_theme_color_override(\"font_color\", Color(\"ffff00\"))
	new_version = version
"

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_jjvhh"]
bg_color = Color(0.1755, 0.158, 0.2, 1)

[sub_resource type="GDScript" id="GDScript_8gbba"]
resource_name = "machine_manager"
script/source = "@tool

extends Node

@export_enum(\"PC\", \"Mobile\", \"Watch\") var import_machine = 0
@export var set_it : bool = false:
	set(value):
		if value:
			set_control()
			set_it = false

func _ready() -> void:
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	pass

func set_control():
	
	if import_machine == 0:
		%ToolControl.custom_minimum_size = Vector2(0, 40)
		%LeftTool.alignment = 0
		%RightTool.alignment = 2
		
		%Settings.visible = true
		%File.visible = true
		%LeftPanel.visible = false
		%RightPanel.visible = false
	
	elif import_machine == 1:
		%ToolControl.custom_minimum_size = Vector2(0, 50)
		%LeftTool.alignment = 0
		%RightTool.alignment = 2
		
		%Settings.visible = true
		%File.visible = true
		%LeftPanel.visible = false
		%RightPanel.visible = false
	
	elif import_machine == 2:
		%ToolControl.custom_minimum_size = Vector2(0, 35)
		%LeftTool.alignment = 2
		%RightTool.alignment = 0
		
		%Settings.visible = false
		%File.visible = false
		%LeftPanel.visible = true
		%RightPanel.visible = true
	
	pass
"

[node name="Main" type="Node"]
script = SubResource("GDScript_bo1nx")

[node name="UI" type="Control" parent="."]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme = ExtResource("1_bo1nx")

[node name="VBoxContainer" type="VBoxContainer" parent="UI"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/separation = 0

[node name="SetArea" type="PanelContainer" parent="UI/VBoxContainer"]
layout_mode = 2
theme = ExtResource("1_bo1nx")
theme_override_styles/panel = SubResource("StyleBoxFlat_jjvhh")

[node name="ToolControl" type="HBoxContainer" parent="UI/VBoxContainer/SetArea"]
unique_name_in_owner = true
custom_minimum_size = Vector2(0, 40)
layout_mode = 2

[node name="LeftTool" type="HBoxContainer" parent="UI/VBoxContainer/SetArea/ToolControl"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3

[node name="Files" type="MenuButton" parent="UI/VBoxContainer/SetArea/ToolControl/LeftTool"]
unique_name_in_owner = true
custom_minimum_size = Vector2(80, 0)
layout_mode = 2
text = "文件"
item_count = 7
popup/item_0/text = "新建项目"
popup/item_0/id = 0
popup/item_1/text = "保存"
popup/item_1/id = 1
popup/item_2/text = "另存为"
popup/item_2/id = 2
popup/item_3/text = "从电脑中读取"
popup/item_3/id = 3
popup/item_4/id = 6
popup/item_4/disabled = true
popup/item_4/separator = true
popup/item_5/text = "从剪贴板读取"
popup/item_5/id = 4
popup/item_6/text = "从剪贴板合并项目到当前项目"
popup/item_6/id = 5

[node name="Settings" type="MenuButton" parent="UI/VBoxContainer/SetArea/ToolControl/LeftTool"]
unique_name_in_owner = true
custom_minimum_size = Vector2(80, 0)
layout_mode = 2
text = "设置"
item_count = 4
popup/item_0/text = "当前"
popup/item_0/id = 0
popup/item_1/text = "没有"
popup/item_1/id = 1
popup/item_2/text = "可用"
popup/item_2/id = 2
popup/item_3/text = "选项"
popup/item_3/id = 3

[node name="File" type="Button" parent="UI/VBoxContainer/SetArea/ToolControl/LeftTool"]
unique_name_in_owner = true
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
text = "文档"

[node name="Message" type="Button" parent="UI/VBoxContainer/SetArea/ToolControl/LeftTool"]
unique_name_in_owner = true
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
theme_override_colors/font_color = Color(1, 1, 1, 1)
text = "公告"
icon_alignment = 2

[node name="RightTool" type="HBoxContainer" parent="UI/VBoxContainer/SetArea/ToolControl"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
alignment = 2

[node name="CompileButton" type="Button" parent="UI/VBoxContainer/SetArea/ToolControl/RightTool"]
unique_name_in_owner = true
custom_minimum_size = Vector2(100, 30)
layout_mode = 2
size_flags_horizontal = 0
text = "快捷导出"

[node name="HBoxContainer" type="HBoxContainer" parent="UI/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 3
theme_override_constants/separation = 0

[node name="LeftPanel" type="Button" parent="UI/VBoxContainer/HBoxContainer"]
unique_name_in_owner = true
visible = false
custom_minimum_size = Vector2(15, 0)
layout_mode = 2

[node name="Editors" type="TabContainer" parent="UI/VBoxContainer/HBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
tab_alignment = 2
current_tab = 0
drag_to_rearrange_enabled = true

[node name="Untitled" parent="UI/VBoxContainer/HBoxContainer/Editors" instance=ExtResource("1_jjgbg")]
unique_name_in_owner = true
layout_mode = 2
size_flags_vertical = 3
metadata/_tab_index = 0

[node name="RightPanel" type="Button" parent="UI/VBoxContainer/HBoxContainer"]
unique_name_in_owner = true
visible = false
custom_minimum_size = Vector2(15, 0)
layout_mode = 2

[node name="Dragging" type="Node2D" parent="."]
unique_name_in_owner = true

[node name="ConfirmCloseApp" parent="." instance=ExtResource("3_8gbba")]
unique_name_in_owner = true
title = "退出应用"
visible = false
force_native = false
window_text = "确认要退出应用吗？"

[node name="MachineManager" type="Node" parent="."]
unique_name_in_owner = true
script = SubResource("GDScript_8gbba")

[node name="FileDialog" type="FileDialog" parent="."]
unique_name_in_owner = true
title = "保存项目"
initial_position = 1
always_on_top = true
force_native = true
dialog_hide_on_ok = true
cancel_button_text = "取消"
mode_overrides_title = false
access = 2
show_hidden_files = true
use_native_dialog = true

[node name="MessageWindow" parent="." instance=ExtResource("4_jjvhh")]
visible = false

[connection signal="pressed" from="UI/VBoxContainer/SetArea/ToolControl/LeftTool/File" to="." method="_on_file_pressed"]
[connection signal="pressed" from="UI/VBoxContainer/SetArea/ToolControl/LeftTool/Message" to="." method="_on_message_pressed"]
[connection signal="pressed" from="UI/VBoxContainer/SetArea/ToolControl/RightTool/CompileButton" to="." method="_on_compile_button_pressed"]
[connection signal="confirmed" from="ConfirmCloseApp" to="." method="_on_confirm_close_app_confirmed"]
[connection signal="file_selected" from="FileDialog" to="." method="_on_file_dialog_file_selected"]
[connection signal="new_message" from="MessageWindow" to="." method="_on_message_window_new_message"]
