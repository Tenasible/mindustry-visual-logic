[gd_scene load_steps=27 format=3 uid="uid://cd1xggw5wy8wq"]

[ext_resource type="Theme" uid="uid://bwqifwabah580" path="res://Themes/logic_block.tres" id="1_wrb8p"]
[ext_resource type="Texture2D" uid="uid://dvyqjbrjb20p3" path="res://Sprites/background.png" id="2_vjobr"]
[ext_resource type="Texture2D" uid="uid://3t378y5xxnay" path="res://Sprites/mdt_title.webp" id="3_wrb8p"]
[ext_resource type="Theme" uid="uid://dyco6ncgsxu3m" path="res://Themes/editor.tres" id="4_7wlcy"]
[ext_resource type="Texture2D" uid="uid://c8c1mgm7pw025" path="res://Sprites/Previews/IconTextures/trash.png" id="5_b78su"]
[ext_resource type="PackedScene" uid="uid://duffgpp67iqh1" path="res://Scenes/set_load_edit.tscn" id="5_wkuwf"]
[ext_resource type="Texture2D" uid="uid://c10a8gnttkqa" path="res://Sprites/Previews/IconTextures/copy.png" id="5_yl2l4"]
[ext_resource type="Texture2D" uid="uid://d28xe1g6hubit" path="res://Sprites/Previews/IconTextures/cancel.png" id="6_7fkqn"]
[ext_resource type="Texture2D" uid="uid://uuy2g1sd7ho6" path="res://Sprites/Previews/IconTextures/load.png" id="6_eo2o7"]
[ext_resource type="PackedScene" uid="uid://cvj60qdn0mft7" path="res://Scenes/theme_confirm.tscn" id="6_yl2l4"]

[sub_resource type="GDScript" id="GDScript_q0a35"]
resource_name = "editor"
script/source = "extends Control

@export var timer: Timer

@export var dragging_node: Node2D
@export var user_blocks: VBoxContainer
@export var machine := 0

func reset_nodes(dragging):
	dragging_node = dragging

	

# Called when the node enters the scene tree for the first time.
func _ready():
	
	machine = get_tree().get_current_scene().machine
	if machine == 0:
		%ClearButton.custom_minimum_size = Vector2(30, 30)
		%CloseButton.custom_minimum_size = Vector2(30, 30)
	
	if machine == 1:
		%ClearButton.custom_minimum_size = Vector2(50, 50)
		%CloseButton.custom_minimum_size = Vector2(50, 50)
	
	if machine == 2:
		%ClearButton.custom_minimum_size = Vector2(30, 30)
		%CloseButton.custom_minimum_size = Vector2(30, 30)
	
	
	%MainSpilt.split_offset = DisplayServer.window_get_size().x * -0.5 + 200
	user_blocks = %UserBlocks
	

	
	# 放出积木的计时器
	timer = Timer.new()
	add_child(timer)
	timer.wait_time = 0.1
	timer.one_shot = true
	timer.timeout.connect(_on_place_blocks)
	timer.start()
	
	
	
	pass # Replace with function body.

func _physics_process(delta: float) -> void:
	if %UpButton.button_pressed:
		%UserBlockScroll.scroll_vertical -= 5
	
	if %DownButton.button_pressed:
		%UserBlockScroll.scroll_vertical += 5
	

func compile() -> void:
	%CompileManager.compile()
	

func add_block_shell(instance , index = -1):
	#var block_shell = load(\"res://Blocks/block_shell.tscn\")
	#block_shell = block_shell.instantiate()
	#%UserBlocks.add_child(block_shell)
	#block_shell.add_block(instance)
	#block_shell.reset_nodes(dragging_node, %UserBlocks)
	#
	#if index == -1:
		#pass
	#else:
		#block_shell.get_parent().move_child(block_shell, index)
	#
	#return(block_shell)
	
	var block = load(instance)
	block = block.instantiate()
	%UserBlocks.add_child(block)
	block.origin_node = %UserBlocks
	block.input_node = %EasyInput
	if index == -1:
		pass
	else:
		block.get_parent().move_child(block, index)
	
	return(block)

func add_given_block(instance):
	#var block_shell = load(\"res://Blocks/block_shell.tscn\")
	#block_shell = block_shell.instantiate()
	#%GivenBlocks.add_child(block_shell)
	#block_shell.add_block(instance)
	#block_shell.reset_nodes(dragging_node, %UserBlocks)
	#block_shell.is_given_block = true
	#
	#return(block_shell)
	
	var block = load(instance)
	block = block.instantiate()
	block.is_given_block = true

	%GivenBlocks.add_child(block)
	
	block.origin_node = %UserBlocks
	block.input_node = %EasyInput
	
	return(block)


func _on_place_blocks():
	
	if timer:
		timer.queue_free
	
	for i in %GivenBlocks.get_children():
		i.queue_free()
	
	%RenameEdit.text = self.name
	
	var spilt_pack = load(\"res://Blocks/spilt_line.tscn\")
	var spilt
	
	spilt = spilt_pack.instantiate()
	spilt.line_text = \"Edit\"
	%GivenBlocks.add_child(spilt)
	
	add_given_block(\"res://Blocks/configure.tscn\")
	add_given_block(\"res://Blocks/Logics/expression.tscn\")
	
	spilt = spilt_pack.instantiate()
	spilt.line_text = \"Put in&out\"
	%GivenBlocks.add_child(spilt)
	
	add_given_block(\"res://Blocks/PutInOut/read.tscn\")
	add_given_block(\"res://Blocks/PutInOut/write.tscn\")
	add_given_block(\"res://Blocks/PutInOut/draw.tscn\")
	add_given_block(\"res://Blocks/PutInOut/print.tscn\")
	add_given_block(\"res://Blocks/PutInOut/print_char.tscn\")
	add_given_block(\"res://Blocks/PutInOut/format.tscn\")
	
	spilt = spilt_pack.instantiate()
	spilt.line_text = \"Controls\"
	%GivenBlocks.add_child(spilt)
	
	add_given_block(\"res://Blocks/Controls/draw_flush.tscn\")
	add_given_block(\"res://Blocks/Controls/print_flush.tscn\")
	add_given_block(\"res://Blocks/Controls/get_link.tscn\")
	add_given_block(\"res://Blocks/Controls/control.tscn\")
	add_given_block(\"res://Blocks/Controls/radar.tscn\")
	add_given_block(\"res://Blocks/Controls/sensor.tscn\")
	
	spilt = spilt_pack.instantiate()
	spilt.line_text = \"Operations\"
	%GivenBlocks.add_child(spilt)
	
	add_given_block(\"res://Blocks/Operations/set.tscn\")
	add_given_block(\"res://Blocks/Operations/operation.tscn\")
	add_given_block(\"res://Blocks/Operations/select.tscn\")
	add_given_block(\"res://Blocks/Operations/look_up.tscn\")
	add_given_block(\"res://Blocks/Operations/pack_color.tscn\")
	add_given_block(\"res://Blocks/Operations/unpack_color.tscn\")
	
	spilt = spilt_pack.instantiate()
	spilt.line_text = \"Logics\"
	%GivenBlocks.add_child(spilt)
	
	add_given_block(\"res://Blocks/Logics/wait.tscn\")
	add_given_block(\"res://Blocks/Logics/stop.tscn\")
	add_given_block(\"res://Blocks/Logics/end.tscn\")
	add_given_block(\"res://Blocks/Logics/jump.tscn\")
	#add_given_block(\"res://Blocks/Logics/jump_label.tscn\")
	
	spilt = spilt_pack.instantiate()
	spilt.line_text = \"Units\"
	%GivenBlocks.add_child(spilt)
	
	add_given_block(\"res://Blocks/Units/unit_bind.tscn\")
	add_given_block(\"res://Blocks/Units/unit_idle.tscn\")
	add_given_block(\"res://Blocks/Units/unit_stop.tscn\")
	add_given_block(\"res://Blocks/Units/unit_move.tscn\")
	add_given_block(\"res://Blocks/Units/unit_boost.tscn\")
	add_given_block(\"res://Blocks/Units/unit_shoot.tscn\")
	add_given_block(\"res://Blocks/Units/unit_item.tscn\")
	add_given_block(\"res://Blocks/Units/unit_pay.tscn\")
	add_given_block(\"res://Blocks/Units/unit_mine.tscn\")
	add_given_block(\"res://Blocks/Units/unit_flag.tscn\")
	add_given_block(\"res://Blocks/Units/unit_build.tscn\")
	add_given_block(\"res://Blocks/Units/unit_getblock.tscn\")
	add_given_block(\"res://Blocks/Units/unit_within.tscn\")
	add_given_block(\"res://Blocks/Units/unit_unbind.tscn\")
	add_given_block(\"res://Blocks/Units/unit_radar.tscn\")
	add_given_block(\"res://Blocks/Units/unit_locate.tscn\")
	
	pass

func read_from_clipboard( add = false , index = -1):
	
	if add:
		pass
	else:
		for i in %UserBlocks.get_children():
			i.queue_free()
	
	
	var data = DisplayServer.clipboard_get()
	var codes = data.replace(\"\\r\\n\" , \"\\n\").replace(\"\\r\" , \"\\n\").split(\"\\n\")
	var code_list = {
		\"read\" : \"res://Blocks/PutInOut/read.tscn\",
		\"write\" : \"res://Blocks/PutInOut/write.tscn\",
		\"draw\" : \"res://Blocks/PutInOut/draw.tscn\",
		\"print\" : \"res://Blocks/PutInOut/print.tscn\",
		\"printchar\" : \"res://Blocks/PutInOut/print_char.tscn\",
		\"format\" : \"res://Blocks/PutInOut/format.tscn\",
		\"drawflush\" : \"res://Blocks/Controls/draw_flush.tscn\",
		\"printflush\" : \"res://Blocks/Controls/print_flush.tscn\",
		\"getlink\" : \"res://Blocks/Controls/get_link.tscn\",
		\"control\" : \"res://Blocks/Controls/control.tscn\",
		\"radar\" : \"res://Blocks/Controls/radar.tscn\",
		\"sensor\" : \"res://Blocks/Controls/sensor.tscn\",
		\"set\" : \"res://Blocks/Operations/set.tscn\",
		\"op\" : \"res://Blocks/Operations/operation.tscn\",
		\"select\" : \"res://Blocks/Operations/select.tscn\",
		\"lookup\" : \"res://Blocks/Operations/look_up.tscn\",
		\"packcolor\" : \"res://Blocks/Operations/pack_color.tscn\",
		\"unpackcolor\" : \"res://Blocks/Operations/unpack_color.tscn\",
		\"wait\" : \"res://Blocks/Logics/wait.tscn\",
		\"stop\" : \"res://Blocks/Logics/stop.tscn\",
		\"end\" : \"res://Blocks/Logics/end.tscn\",
		\"jump\" : \"res://Blocks/Logics/jump.tscn\",
		\"ubind\" : \"res://Blocks/Units/unit_bind.tscn\",
		\"ucontrol idle\" : \"res://Blocks/Units/unit_idle.tscn\",
		\"ucontrol stop\" : \"res://Blocks/Units/unit_stop.tscn\",
		\"ucontrol move\" : \"res://Blocks/Units/unit_move.tscn\",
		\"ucontrol approach\" : \"res://Blocks/Units/unit_move.tscn\",
		\"ucontrol pathfind\" : \"res://Blocks/Units/unit_move.tscn\",
		\"ucontrol autoPathfind\" : \"res://Blocks/Units/unit_move.tscn\",
		\"ucontrol boost\" : \"res://Blocks/Units/unit_boost.tscn\",
		\"ucontrol target\" : \"res://Blocks/Units/unit_shoot.tscn\",
		\"ucontrol targetp\" : \"res://Blocks/Units/unit_shoot.tscn\",
		\"ucontrol itemDrop\" : \"res://Blocks/Units/unit_item.tscn\",
		\"ucontrol itemTake\" : \"res://Blocks/Units/unit_item.tscn\",
		\"ucontrol payTake\" : \"res://Blocks/Units/unit_pay.tscn\",
		\"ucontrol payDrop\" : \"res://Blocks/Units/unit_pay.tscn\",
		\"ucontrol payEnter\" : \"res://Blocks/Units/unit_pay.tscn\",
		\"ucontrol mine\" : \"res://Blocks/Units/unit_mine.tscn\",
		\"ucontrol flag\" : \"res://Blocks/Units/unit_flag.tscn\",
		\"ucontrol build\" : \"res://Blocks/Units/unit_build.tscn\",
		\"ucontrol getBlock\" : \"res://Blocks/Units/unit_getblock.tscn\",
		\"ucontrol within\" : \"res://Blocks/Units/unit_within.tscn\",
		\"ucontrol unbind\" : \"res://Blocks/Units/unit_unbind.tscn\",
		\"uradar\" : \"res://Blocks/Units/unit_radar.tscn\",
		\"ulocate\" : \"res://Blocks/Units/unit_locate.tscn\",
		\"expression\" : \"res://Blocks/Logics/expression.tscn\",
		\"jumplabel\" : \"res://Blocks/Logics/jump_label.tscn\",
	}
	
	var origin_index = index
	
	if add:
		# 遍历剪贴板的每一行
		for i in codes:
			
			# 检查此行是否符合要求
			if code_list.has( i.split(\" \")[0] ):
				
				var node = add_block_shell( code_list[i.split(\" \")[0]] ,index)
				
				if i.split(\" \")[0] == \"print\":
					node.load_value( [\"print\", i.right(i.length() - 6)]  )
				elif i.split(\" \")[0] == \"format\":
					node.load_value( [\"format\", i.right(i.length() - 7)] )
				elif i.split(\" \")[0] == \"jump\":
					
					var jump_load_value = i.split(\" \")
					jump_load_value[1] = str(int(jump_load_value[1]) + origin_index)
					
					node.load_value( jump_load_value )
					
				else:
					node.load_value( i.split(\" \") )
				
			elif i.split(\" \")[0] == \"ucontrol\":
				if code_list.has( i.split(\" \")[0] + \" \" + i.split(\" \")[1]):
					var node = add_block_shell( code_list[ i.split(\" \")[0] + \" \" + i.split(\" \")[1] ] ,index)
					node.load_value( i.split(\" \") )
			
			elif i.begins_with(\"#\"):
				var node = add_block_shell( code_list[\"expression\"] ,index)
				if i[1] == \" \":
					node.load_value( [i.erase(0, 2)] )
				else:
					node.load_value( [i.erase(0)] )
				
			
			elif i.ends_with(\":\") and (not i.contains(\" \")):
				var node = add_block_shell( code_list[\"jumplabel\"] ,index)
				node.load_value( [i.replace(\":\", \"\")] )
			
			
			index += 1
			
		# 修复jump问题
		var check_index = origin_index
		for i in codes:
			
			if i.split(\" \")[0] == \"jump\":
				var jump_load_value = i.split(\" \")
				if jump_load_value[1].is_valid_int():
					jump_load_value[1] = str(int(jump_load_value[1]) + origin_index)
				%UserBlocks.get_child(check_index).load_value( jump_load_value )
				
			if code_list.has( i.split(\" \")[0] ):
				check_index += 1
			elif i.split(\" \")[0] == \"ucontrol\":
				check_index += 1
			elif i.begins_with(\"#\"):
				check_index += 1
			elif i.ends_with(\":\") and (not i.contains(\" \")):
				check_index += 1
		
	else:
		# 遍历剪贴板的每一行
		for i in codes:
			
			# 检查此行是否符合要求
			if code_list.has( i.split(\" \")[0] ):
				
				var node = add_block_shell( code_list[i.split(\" \")[0]] )
				
				if i.split(\" \")[0] == \"print\":
					node.load_value( [\"print\", i.right(i.length() - 6)]  )
				elif i.split(\" \")[0] == \"format\":
					node.load_value( [\"format\", i.right(i.length() - 7)] )
				else:
					node.load_value( i.split(\" \") )
				
			elif i.split(\" \")[0] == \"ucontrol\":
				if code_list.has( i.split(\" \")[0] + \" \" + i.split(\" \")[1]):
					var node = add_block_shell( code_list[ i.split(\" \")[0] + \" \" + i.split(\" \")[1] ] )
					node.load_value( i.split(\" \") )
			
			elif i.begins_with(\"#\"):
				var node = add_block_shell( code_list[\"expression\"] ,index)
				if i[1] == \" \":
					node.load_value( [i.erase(0, 2)] )
				else:
					node.load_value( [i.erase(0)] )
				
			
			elif i.ends_with(\":\") and (not i.contains(\" \")):
				var node = add_block_shell( code_list[\"jumplabel\"] ,index)
				node.load_value( [i.replace(\":\", \"\")] )
			
		# 修复jump问题
		var check_index = 0
		for i in codes:
			
			if i.split(\" \")[0] == \"jump\":
				%UserBlocks.get_child(check_index).load_value( i.split(\" \") )
		
			if code_list.has( i.split(\" \")[0] ):
				check_index += 1
			elif i.split(\" \")[0] == \"ucontrol\":
				check_index += 1
			elif i.begins_with(\"#\"):
				check_index += 1
			elif i.ends_with(\":\") and (not i.contains(\" \")):
				check_index += 1
	
	%UserBlocks._on_block_moved()


func _on_clear_pressed() -> void:
	
	%ClearButton.get_child(0).visible = true
	
	
	pass # Replace with function body.


func _on_close_pressed() -> void:
	
	%CloseButton.get_child(0).visible = true
	
	pass # Replace with function body.


func _on_rename_edit_editing_toggled(toggled_on: bool) -> void:
	%RenameEdit.flat = toggled_on == false
	pass # Replace with function body.


func _on_rename_edit_text_submitted(new_text: String) -> void:
	self.name = %RenameEdit.text
	pass # Replace with function body.


func _on_confirm_clear_confirmed(edit) -> void:
	
	for i in %UserBlocks.get_children():
		i.queue_free()
	
	
	pass # Replace with function body.


func _on_confirm_close_confirmed(edit) -> void:
	queue_free()
	
	pass # Replace with function body.

func bind_confirm():
	%LoadConfirm.visible = true


func _on_set_load_edit_confirmed(value: int) -> void:
	
	read_from_clipboard(true , int(min(value, %UserBlocks.get_child_count() )) )
	
	pass # Replace with function body.


func _on_import_button_pressed() -> void:
	compile()




func _on_load_confirm_confirmed(edit: String) -> void:
	if edit.is_valid_int():
		read_from_clipboard(true , min(int(edit), %UserBlocks.get_child_count() ) )
	else:
		%LoadWarning.visible = true
"

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_a7iym"]
bg_color = Color(0.176471, 0.156863, 0.2, 1)

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_7wlcy"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_wlowb"]
content_margin_left = 5.0
content_margin_top = 5.0
content_margin_right = 5.0
content_margin_bottom = 5.0
bg_color = Color(0.17598, 0.1533, 0.21, 1)
border_width_left = 5
border_width_top = 5
border_width_right = 5
border_width_bottom = 5
border_color = Color(0.25792, 0.2232, 0.31, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_qdoku"]
bg_color = Color(0.141176, 0.141176, 0.141176, 1)
draw_center = false
border_width_left = 5
border_width_top = 5
border_width_right = 5
border_width_bottom = 5
border_color = Color(0.258824, 0.223529, 0.309804, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_wkuwf"]
bg_color = Color(0.141176, 0.141176, 0.141176, 1)
border_color = Color(0.176471, 0.156863, 0.2, 1)

[sub_resource type="GDScript" id="GDScript_a7iym"]
resource_name = "user_blocks"
script/source = "extends VBoxContainer

@export var jump :PanelContainer
@export var jump_lines : Dictionary
var jump_line_rank : Dictionary

var input_node

signal block_move

func _on_block_moved():
	
	# 进行跳线计算
	
	# 剔除0长度跳线和不存在的跳线
	var jump_line_true: Dictionary
	for i in jump_lines:
		if i == null:
			continue
			
		if jump_lines[i][0] == jump_lines[i][1]:
			continue
		
		if jump_lines[i][0] == -1 or jump_lines[i][1] == -1 :
			continue
		
		jump_line_true[i] = jump_lines[i]
	
	# 整理数据化
	var jump_line_numbers: Dictionary
	for i in jump_line_true:
		if jump_line_true[i][0] == -1:
			pass
		else:
			
			jump_line_numbers[jump_line_true[i][0]] = jump_line_true[i][1]

	# 剔除终点一致的跳线中较短的跳线
	var long_lines: Dictionary
	for i in jump_line_numbers:
		
		if long_lines.has(i):
			# 若jump_lines有同目标的跳线跳线比当前这条更长
			if abs(jump_line_numbers[i] - i) > abs(long_lines[i] - i):
				long_lines[i] = jump_line_numbers[i]
		
		else:
			long_lines[i] = jump_line_numbers[i]

	# 所有跳线按照从短到长排序
	var ranked_lines: Array
	var long_lines_dup = long_lines.duplicate(true)
	
	for i in long_lines.size():
		var min_dis = INF
		var min_line
		
		for j in long_lines_dup:
			if abs(long_lines_dup[j] - j) <= min_dis:
				min_dis = abs(long_lines_dup[j] - j)
				min_line = [j, long_lines_dup[j]]
		
		ranked_lines.append(min_line)
		long_lines_dup.erase(min_line[0])

	# 进行高度计算，遍历比自己低的线，若有线在自己内部或与自己相交，则设为其高度+1
	var line_height: Dictionary
	
	for i in ranked_lines:
		
		var line_height_dup = line_height.duplicate()
		line_height[i[0]] = [i[1], 1]
		for j in line_height_dup:
			if is_related(i[0], i[1], line_height_dup[j][0], j):
				line_height[i[0]] = [i[1], line_height_dup[j][1] + 1]
	
	# 整理
	for i in line_height:
		line_height[i] = line_height[i][1]
	

	jump_line_rank = line_height

	emit_signal(\"block_move\")

func is_related(var1, var2, var3, var4) -> bool:
	return(not(
		(var1 > var3 and var2 > var3 and var1 > var4 and var2 > var4) or 
		(var1 < var3 and var2 < var3 and var1 < var4 and var2 < var4)
	))
"

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_b78su"]
bg_color = Color(0.176471, 0.156863, 0.2, 1)

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_8howc"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_b78su"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_7fkqn"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_yl2l4"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_7wlcy"]
content_margin_left = 5.0
content_margin_top = 5.0
content_margin_right = 5.0
content_margin_bottom = 5.0
bg_color = Color(0.258824, 0.223529, 0.309804, 1)

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_wkuwf"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_8howc"]
bg_color = Color(0, 0, 0, 0.352941)

[sub_resource type="GDScript" id="GDScript_eo2o7"]
resource_name = "compile_manager"
script/source = "extends Node

var blocks_dup
var step := 0

func compile():
	
	blocks_dup = %UserBlocks.duplicate()
	blocks_dup.visible = false
	
	# 复制一份积木列表到自己之下
	self.add_child(blocks_dup)
	
	# 确保所有积木的内置变量不出错
	for i in blocks_dup.get_children():
		i.origin_node = blocks_dup
	
	step = 0
	$CompileWait.start()

## 每次计时器结束计时时，进行下一步。返回true时结束。
func _on_timer_timeout() -> bool:
	
	# 第一步，jump锁定目标
	if step == 0:
		for i in blocks_dup.get_children():
			i.pre_compile(0)
		
		step = 1
	
	# 第二步，删除需要忽略的积木
	elif step == 1:
		for i in blocks_dup.get_children():
			i.pre_compile(1)
		
		step = 128
	
	# 最后一步，导出到剪贴板
	elif step == 128:
	
		var compile_text: String
		
		# 所有积木进行二级导出
		for i in blocks_dup.get_children():
			compile_text += i.compile()
		
		# 删除临时积木列表
		blocks_dup.queue_free()
		
		DisplayServer.clipboard_set(compile_text)
		return true
	
	# 刷新
	for i in blocks_dup.get_children():
		i._on_any_block_moved()
		
	$CompileWait.start()
	return false
"

[node name="Editor" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme = ExtResource("1_wrb8p")
script = SubResource("GDScript_q0a35")

[node name="Panel" type="Panel" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_styles/panel = SubResource("StyleBoxFlat_a7iym")

[node name="WorkArea" type="PanelContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
size_flags_vertical = 3
theme_override_styles/panel = SubResource("StyleBoxEmpty_7wlcy")

[node name="MainSpilt" type="HSplitContainer" parent="WorkArea"]
unique_name_in_owner = true
layout_mode = 2
theme_override_constants/separation = 0
theme_override_constants/minimum_grab_thickness = 12
theme_override_constants/autohide = 0
split_offset = -450
dragger_visibility = 1

[node name="PanelContainer2" type="PanelContainer" parent="WorkArea/MainSpilt"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
theme_override_styles/panel = SubResource("StyleBoxFlat_wlowb")

[node name="MarginContainer" type="MarginContainer" parent="WorkArea/MainSpilt/PanelContainer2"]
clip_contents = true
layout_mode = 2
theme_override_constants/margin_top = 3
theme_override_constants/margin_right = 3
theme_override_constants/margin_bottom = 3

[node name="ScrollContainer" type="ScrollContainer" parent="WorkArea/MainSpilt/PanelContainer2/MarginContainer"]
clip_contents = false
layout_mode = 2

[node name="MarginContainer" type="MarginContainer" parent="WorkArea/MainSpilt/PanelContainer2/MarginContainer/ScrollContainer"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
theme_override_constants/margin_left = 30
theme_override_constants/margin_top = 50
theme_override_constants/margin_right = 0
theme_override_constants/margin_bottom = 20

[node name="GivenBlocks" type="VBoxContainer" parent="WorkArea/MainSpilt/PanelContainer2/MarginContainer/ScrollContainer/MarginContainer"]
unique_name_in_owner = true
layout_mode = 2
theme_override_constants/separation = 15

[node name="PanelContainer" type="PanelContainer" parent="WorkArea/MainSpilt"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
theme_override_styles/panel = SubResource("StyleBoxFlat_qdoku")

[node name="Panel" type="Panel" parent="WorkArea/MainSpilt/PanelContainer"]
z_as_relative = false
layout_mode = 2
theme_override_styles/panel = SubResource("StyleBoxFlat_wkuwf")

[node name="TextureRect" type="TextureRect" parent="WorkArea/MainSpilt/PanelContainer"]
visible = false
self_modulate = Color(1, 1, 1, 0.0392157)
layout_mode = 2
texture = ExtResource("2_vjobr")
stretch_mode = 1

[node name="TextureRect2" type="TextureRect" parent="WorkArea/MainSpilt/PanelContainer"]
visible = false
self_modulate = Color(1, 1, 1, 0.00392157)
layout_mode = 2
size_flags_horizontal = 4
size_flags_vertical = 4
texture = ExtResource("3_wrb8p")
stretch_mode = 2

[node name="MarginContainer" type="MarginContainer" parent="WorkArea/MainSpilt/PanelContainer"]
clip_contents = true
layout_mode = 2
size_flags_horizontal = 3
theme_override_constants/margin_left = 50
theme_override_constants/margin_top = 10
theme_override_constants/margin_right = 5
theme_override_constants/margin_bottom = 0

[node name="UserBlockScroll" type="ScrollContainer" parent="WorkArea/MainSpilt/PanelContainer/MarginContainer"]
unique_name_in_owner = true
clip_contents = false
layout_mode = 2
size_flags_horizontal = 3
follow_focus = true

[node name="MarginContainer" type="MarginContainer" parent="WorkArea/MainSpilt/PanelContainer/MarginContainer/UserBlockScroll"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
theme_override_constants/margin_left = 10
theme_override_constants/margin_top = 50
theme_override_constants/margin_right = 20
theme_override_constants/margin_bottom = 100

[node name="UserBlocks" type="VBoxContainer" parent="WorkArea/MainSpilt/PanelContainer/MarginContainer/UserBlockScroll/MarginContainer"]
unique_name_in_owner = true
layout_mode = 2
theme_override_constants/separation = 2
script = SubResource("GDScript_a7iym")

[node name="EasyInput" type="Node2D" parent="WorkArea/MainSpilt/PanelContainer/MarginContainer/UserBlockScroll/MarginContainer"]
unique_name_in_owner = true
position = Vector2(-185, -15)

[node name="PanelContainer2" type="PanelContainer" parent="WorkArea/MainSpilt/PanelContainer"]
custom_minimum_size = Vector2(40, 0)
layout_mode = 2
size_flags_horizontal = 0
theme_override_styles/panel = SubResource("StyleBoxFlat_b78su")

[node name="MarginContainer" type="MarginContainer" parent="WorkArea/MainSpilt/PanelContainer/PanelContainer2"]
layout_mode = 2
theme_override_constants/margin_top = 40

[node name="VBoxContainer" type="VBoxContainer" parent="WorkArea/MainSpilt/PanelContainer/PanelContainer2/MarginContainer"]
custom_minimum_size = Vector2(50, 0)
layout_mode = 2

[node name="UpButton" type="Button" parent="WorkArea/MainSpilt/PanelContainer/PanelContainer2/MarginContainer/VBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_vertical = 3
theme_override_styles/hover_pressed = SubResource("StyleBoxEmpty_8howc")
theme_override_styles/hover = SubResource("StyleBoxEmpty_b78su")
theme_override_styles/pressed = SubResource("StyleBoxEmpty_7fkqn")
theme_override_styles/normal = SubResource("StyleBoxEmpty_yl2l4")
action_mode = 0

[node name="DownButton" type="Button" parent="WorkArea/MainSpilt/PanelContainer/PanelContainer2/MarginContainer/VBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_vertical = 3
theme_override_styles/hover_pressed = SubResource("StyleBoxEmpty_8howc")
theme_override_styles/hover = SubResource("StyleBoxEmpty_b78su")
theme_override_styles/pressed = SubResource("StyleBoxEmpty_7fkqn")
theme_override_styles/normal = SubResource("StyleBoxEmpty_yl2l4")
action_mode = 0

[node name="PanelContainer" type="PanelContainer" parent="WorkArea/MainSpilt/PanelContainer"]
z_index = 1
custom_minimum_size = Vector2(0, 40)
layout_mode = 2
size_flags_vertical = 0
theme = ExtResource("4_7wlcy")
theme_override_styles/panel = SubResource("StyleBoxFlat_7wlcy")

[node name="Tools" type="HBoxContainer" parent="WorkArea/MainSpilt/PanelContainer/PanelContainer"]
unique_name_in_owner = true
layout_mode = 2

[node name="Lefts" type="HBoxContainer" parent="WorkArea/MainSpilt/PanelContainer/PanelContainer/Tools"]
layout_mode = 2
size_flags_horizontal = 2
theme_override_constants/separation = 8

[node name="RenameEdit" type="LineEdit" parent="WorkArea/MainSpilt/PanelContainer/PanelContainer/Tools/Lefts"]
unique_name_in_owner = true
layout_mode = 2
theme_override_styles/focus = SubResource("StyleBoxEmpty_wkuwf")
theme_override_styles/normal = SubResource("StyleBoxFlat_8howc")
text = "Editor"
max_length = 36
expand_to_text_length = true
emoji_menu_enabled = false
flat = true
select_all_on_focus = true

[node name="CopyButton" type="Button" parent="WorkArea/MainSpilt/PanelContainer/PanelContainer/Tools/Lefts"]
unique_name_in_owner = true
custom_minimum_size = Vector2(30, 30)
layout_mode = 2
icon = ExtResource("5_yl2l4")
icon_alignment = 1
expand_icon = true

[node name="Rights" type="HBoxContainer" parent="WorkArea/MainSpilt/PanelContainer/PanelContainer/Tools"]
layout_mode = 2
size_flags_horizontal = 10
theme_override_constants/separation = 8

[node name="ImportButton" type="Button" parent="WorkArea/MainSpilt/PanelContainer/PanelContainer/Tools/Rights"]
unique_name_in_owner = true
custom_minimum_size = Vector2(30, 30)
layout_mode = 2
icon = ExtResource("6_eo2o7")
icon_alignment = 1
expand_icon = true

[node name="ClearButton" type="Button" parent="WorkArea/MainSpilt/PanelContainer/PanelContainer/Tools/Rights"]
unique_name_in_owner = true
custom_minimum_size = Vector2(30, 30)
layout_mode = 2
icon = ExtResource("5_b78su")
icon_alignment = 1
expand_icon = true

[node name="ConfirmClear" parent="WorkArea/MainSpilt/PanelContainer/PanelContainer/Tools/Rights/ClearButton" instance=ExtResource("6_yl2l4")]
unique_name_in_owner = true
title = "清空项目"
visible = false
force_native = false
window_text = "是否清空该编辑器下的所有积木？"

[node name="Label" parent="WorkArea/MainSpilt/PanelContainer/PanelContainer/Tools/Rights/ClearButton/ConfirmClear/Control/MarginContainer2/VBoxContainer" index="0"]
text = "是否清空该编辑器下的所有积木？"

[node name="Title" parent="WorkArea/MainSpilt/PanelContainer/PanelContainer/Tools/Rights/ClearButton/ConfirmClear/Control/PanelContainer/TitlePanel" index="1"]
text = "清空项目"

[node name="CloseButton" type="Button" parent="WorkArea/MainSpilt/PanelContainer/PanelContainer/Tools/Rights"]
unique_name_in_owner = true
custom_minimum_size = Vector2(30, 30)
layout_mode = 2
icon = ExtResource("6_7fkqn")
icon_alignment = 1
expand_icon = true

[node name="ConfirmClose" parent="WorkArea/MainSpilt/PanelContainer/PanelContainer/Tools/Rights/CloseButton" instance=ExtResource("6_yl2l4")]
unique_name_in_owner = true
title = "关闭编辑器"
visible = false
force_native = false
window_text = "是否关闭当前编辑器？"

[node name="Label" parent="WorkArea/MainSpilt/PanelContainer/PanelContainer/Tools/Rights/CloseButton/ConfirmClose/Control/MarginContainer2/VBoxContainer" index="0"]
text = "是否关闭当前编辑器？"

[node name="Title" parent="WorkArea/MainSpilt/PanelContainer/PanelContainer/Tools/Rights/CloseButton/ConfirmClose/Control/PanelContainer/TitlePanel" index="1"]
text = "关闭编辑器"

[node name="SetLoadEdit" parent="." instance=ExtResource("5_wkuwf")]
unique_name_in_owner = true
visible = false
z_index = 100
layout_mode = 1
offset_left = -85.0
offset_top = -59.0
offset_right = 85.0
offset_bottom = 59.0

[node name="LoadConfirm" parent="." instance=ExtResource("6_yl2l4")]
unique_name_in_owner = true
title = "合并逻辑"
visible = false
force_native = false
window_text = "请输入插入的行数，逻辑将从下一行插入。"
ask = false
line_edit = true

[node name="Label" parent="LoadConfirm/Control/MarginContainer2/VBoxContainer" index="0"]
text = "请输入插入的行数，逻辑将从下一行插入。"

[node name="LineEdit" parent="LoadConfirm/Control/MarginContainer2/VBoxContainer" index="1"]
visible = true

[node name="CancelButton" parent="LoadConfirm/Control/MarginContainer/HBoxContainer" index="1"]
visible = false

[node name="Title" parent="LoadConfirm/Control/PanelContainer/TitlePanel" index="1"]
text = "合并逻辑"

[node name="LoadWarning" parent="." instance=ExtResource("6_yl2l4")]
unique_name_in_owner = true
title = "错误"
visible = false
force_native = false
window_text = "输入栏仅可输入数字。"
ask = false

[node name="Label" parent="LoadWarning/Control/MarginContainer2/VBoxContainer" index="0"]
text = "输入栏仅可输入数字。"

[node name="CancelButton" parent="LoadWarning/Control/MarginContainer/HBoxContainer" index="1"]
visible = false

[node name="Title" parent="LoadWarning/Control/PanelContainer/TitlePanel" index="1"]
text = "错误"

[node name="CompileManager" type="Node" parent="."]
unique_name_in_owner = true
script = SubResource("GDScript_eo2o7")

[node name="CompileWait" type="Timer" parent="CompileManager"]
wait_time = 0.001
one_shot = true

[connection signal="sort_children" from="WorkArea/MainSpilt/PanelContainer/MarginContainer/UserBlockScroll/MarginContainer/UserBlocks" to="WorkArea/MainSpilt/PanelContainer/MarginContainer/UserBlockScroll/MarginContainer/UserBlocks" method="_on_block_moved"]
[connection signal="editing_toggled" from="WorkArea/MainSpilt/PanelContainer/PanelContainer/Tools/Lefts/RenameEdit" to="." method="_on_rename_edit_editing_toggled"]
[connection signal="text_submitted" from="WorkArea/MainSpilt/PanelContainer/PanelContainer/Tools/Lefts/RenameEdit" to="." method="_on_rename_edit_text_submitted"]
[connection signal="pressed" from="WorkArea/MainSpilt/PanelContainer/PanelContainer/Tools/Rights/ImportButton" to="." method="_on_import_button_pressed"]
[connection signal="pressed" from="WorkArea/MainSpilt/PanelContainer/PanelContainer/Tools/Rights/ClearButton" to="." method="_on_clear_pressed"]
[connection signal="confirmed" from="WorkArea/MainSpilt/PanelContainer/PanelContainer/Tools/Rights/ClearButton/ConfirmClear" to="." method="_on_confirm_clear_confirmed"]
[connection signal="pressed" from="WorkArea/MainSpilt/PanelContainer/PanelContainer/Tools/Rights/CloseButton" to="." method="_on_close_pressed"]
[connection signal="confirmed" from="WorkArea/MainSpilt/PanelContainer/PanelContainer/Tools/Rights/CloseButton/ConfirmClose" to="." method="_on_confirm_close_confirmed"]
[connection signal="confirmed" from="SetLoadEdit" to="." method="_on_set_load_edit_confirmed"]
[connection signal="confirmed" from="LoadConfirm" to="." method="_on_load_confirm_confirmed"]
[connection signal="timeout" from="CompileManager/CompileWait" to="CompileManager" method="_on_timer_timeout"]

[editable path="WorkArea/MainSpilt/PanelContainer/PanelContainer/Tools/Rights/ClearButton/ConfirmClear"]
[editable path="WorkArea/MainSpilt/PanelContainer/PanelContainer/Tools/Rights/CloseButton/ConfirmClose"]
[editable path="LoadConfirm"]
[editable path="LoadWarning"]
