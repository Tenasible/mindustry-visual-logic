[gd_scene load_steps=10 format=3 uid="uid://ls1vidl5bpbr"]

[ext_resource type="Theme" uid="uid://bwqifwabah580" path="res://Themes/logic_block.tres" id="1_tx23r"]
[ext_resource type="StyleBox" uid="uid://obpmtyo5a0p" path="res://LogicBlockStyles/logic.tres" id="2_kgnm4"]
[ext_resource type="StyleBox" uid="uid://dd387wna6hgc7" path="res://LogicBlockStyles/ButtonSettings/option_button.tres" id="3_8jirg"]
[ext_resource type="Texture2D" uid="uid://d3j8xo75x4ls6" path="res://Sprites/Previews/IconTextures/play-2.png" id="4_tx23r"]

[sub_resource type="GDScript" id="GDScript_kgnm4"]
resource_name = "jump"
script/source = "extends LogicBlocks



func load_value(value: Array):
	
	
	%c.text = value[1]
		
	option_get_item(%op1,value[2])
	%a.text = value[3]
	%b.text = value[4]
	
	emit_signal(\"jumped\", %c.text)
	if value[1].is_valid_int():
		
		if origin_node.get_child(int(value[1])) != null:
			jump_to = origin_node.get_child(int(value[1]))
			set_jump_dictionary( jump_to.get_index() )
	
	

func option_get_item(node: OptionButton, optext : String):
	for i in range(node.get_popup().item_count):
		if op_list[i] == optext:
			node.select(i)
			_on_op_1_item_selected(i)

var asynchronous_reset = false # 是否完成异步初始化

var jumping = false

@export var jump_to : PanelContainer
@export var jump_index := -1
var jump_lines

var current_height : float = self.global_position.x
var op_list = {
		0 : \"equal\" ,
		1 : \"notEqual\" ,
		2 : \"lessThan\" ,
		3 : \"lessThanEq\" ,
		4 : \"greaterThan\" ,
		5 : \"greaterThanEq\" ,
		6 : \"strictEqual\" ,
		7 : \"always\" ,
	}

signal jumped(jump_index: int)
signal jump_start()

func compile():
	
	if %c.text == null:
		return(\"jump \" + \"-1\" + \" \" + op_list[%op1.selected] + \" \" + %a.text + \" \" + %b.text + \"\\n\")
	
	elif %c.text.is_valid_int() and jump_to:
		return(\"jump \" + str(jump_to.get_index()) + \" \" + op_list[%op1.selected] + \" \" + %a.text + \" \" + %b.text + \"\\n\")
		
	else:
		return(\"jump \" + %c.text + \" \" + op_list[%op1.selected] + \" \" + %a.text + \" \" + %b.text + \"\\n\")
	


func _process(delta: float) -> void:
	
	logic_process()
	
	if jump_to:
		jump_index = jump_to.get_index()
	$Node.global_position = Vector2(0 , 0)
	
	
	if not asynchronous_reset:
		if origin_node:
			origin_node.sort_children.connect(_on_any_block_moved)
			asynchronous_reset = true
	
	# jump拖拽
	if jumping:
	
		if origin_node != null:
			
			var min_dis = INF
			var min_block = origin_node.get_child(0)
			
			for i in origin_node.get_children():
		
				if abs(i.global_position.y + i.size.y * 0.5 - get_global_mouse_position().y) < min_dis:
			
					min_block = i
					min_dis = abs(i.global_position.y + i.size.y * 0.5 - get_global_mouse_position().y)

			# 若jump目标是自己则不锁定

			if min_block == self:
				%c.text = \"-1\"
				jump_to = null
			
			else:
				%c.text = str(min_block.get_index())
				jump_to = min_block
				set_jump_dictionary( jump_to.get_index() )
		
		
		# 松鼠标左键后消失
		if Input.is_mouse_button_pressed(MOUSE_BUTTON_LEFT) == false:
			
			jumping = false
			if jump_to:
				
				set_jump_dictionary( jump_to.get_index() )
				
			else:
				
				set_jump_dictionary( -1 )

		
		
		pass
		
	
	
	
	## jump自我排名
	#if jump_to != null:
		#jump_index = jump_to.get_index()
	#
	#var jump_origin = get_index()
	#
	## 剔除与自己完全不相干的跳线。
	#var jump_not_related : Dictionary
	#var jump_not_related_true : Dictionary
	#var jump_related : Dictionary
	#var jump_lines = origin_node.jump_lines.duplicate(true)
	#
	#for i in jump_lines:
		#if i != null:
			#if is_related(jump_lines[i][0], jump_lines[i][1], jump_origin, jump_index):
				#jump_related[i] = jump_lines[i]
			#else:
				#jump_not_related[i] = jump_lines[i]
	#
	#jump_not_related_true = jump_not_related.duplicate(true)
	#
	#for i in jump_not_related:
		#for j in jump_related:
			#
			#if is_related(jump_not_related[i][0], jump_not_related[i][1], jump_related[j][0], jump_related[j][1]):
				#jump_not_related_true.erase(i)
	#
	#for i in jump_not_related_true:
		#jump_lines.erase(i)
	#
	## 给所有跳线按照目标点分组
	#var jump_line_groups : Dictionary
	#
	#for i in jump_lines:
		#if jump_line_groups.has( jump_lines[i][1] ):
			#jump_line_groups[ jump_lines[i][1] ].append( jump_lines[i][0] )
		#else:
			#jump_line_groups[ jump_lines[i][1] ] = [ jump_lines[i][0] ]
	#
	## 整理所有跳线，只保留上点、下点和点距。
	#var jump_line_organized : Dictionary
	#
	#for i in jump_line_groups:
		#jump_line_organized[i] = {
			#\"max\" : array_max(jump_line_groups[i], i),
			#\"min\" : array_min(jump_line_groups[i], i),
			#\"dis\" : array_max(jump_line_groups[i], i) - array_min(jump_line_groups[i], i)
		#}
		#
	#
	## 对所有目标点按照点距进行排名。越靠前点距越小。
	#var jump_line_dis_rank : Array
	#
	#var min_name
	#
	#for j in range(jump_line_organized.size() ):
		#var min_dis = INF
		#
		#for i in jump_line_organized:
			## 找出dis值最小的键名
			#
			#if jump_line_organized[i][\"dis\"] < min_dis:
				#min_dis = jump_line_organized[i][\"dis\"]
				#min_name = i
		#
		#jump_line_dis_rank.append(min_name)
		#jump_line_organized.erase(min_name)
	#
	
	#
	# jump线计算
	if jump_to != null:
		
		
		
		var rank = 0
		var jump_line_dis_rank = origin_node.jump_line_rank
		# 获取自己的排名
		if jump_line_dis_rank.has(jump_index):
			rank = jump_line_dis_rank[jump_index]
		else:
			rank = 0
		
		# jump线绘制
		
		%JumpLine.visible = true
		%ArrowRight.visible = true
		
		
		var start = self.global_position + Vector2( 20 , self.size.y * 0.5)
		var end : Vector2
		
		

		end = jump_to.global_position + Vector2( 10 , jump_to.size.y * 0.5)
			
		%ArrowRight.global_position = end
		
		var jump_height = end.x - ( rank * 6 + 10 + float(rank >= 4) * 22)
		current_height += (jump_height - current_height) * 0.2
		
		if jump_to == self:
			%JumpLine.points = PackedVector2Array([
				start,
				
				start + Vector2(-25, 0),
				
				end,
			])
		
		else:
			%JumpLine.points = PackedVector2Array([
				Vector2(start),
				Vector2(current_height, start.y + (float(start.y < end.y) * 2 - 1) * 12),
				
				Vector2(current_height, end.y + (float(start.y > end.y) * 2 - 1) * 12),
				Vector2(end),
			])
		
		
		
		
	
	else:
		%JumpLine.visible = false
		%ArrowRight.visible = false
	
	pass




func _on_op_1_item_selected(index: int) -> void:
	
	if index == 7:
		
		%a.visible = false
		%b.visible = false
	
	else:
		
		%a.visible = true
		%b.visible = true
		
	
	pass # Replace with function body.




func _on_c_text_changed(new_text: String) -> void:
	
	if new_text.is_valid_int():
	
		if int(new_text) == -1:
			jump_to = null
		else:
			jump_to = origin_node.get_child( int(new_text) )
		
		if jump_to:
			jump_index = jump_to.get_index()
	
	else:
		jump_to = null
	
	pass # Replace with function body.




func _on_arrow_left_button_down():
	if is_given_block:
		return false
	
	
	emit_signal(\"jump_start\")
	
	jumping = true
	
	pass # Replace with function body.



func array_max(array: Array, n):
	var max = INF * -1
	var array_true = array.duplicate(true)
	array_true.append(n)
	for i in array_true:
		max = max(i , max)
	return max
	
func array_min(array: Array, n):
	var min = INF
	var array_true = array.duplicate(true)
	array_true.append(n)
	for i in array_true:
		min = min(i , min)
	return min

func is_related(var1, var2, var3, var4) -> bool:
	return(not(
		(var1 > var3 and var2 > var3 and var1 > var4 and var2 > var4) or 
		(var1 < var3 and var2 < var3 and var1 < var4 and var2 < var4)
	))



# 向UserBlocks声明自己的jump信息。
func set_jump_dictionary(index : int):
	if \"jump_lines\" in origin_node:
		if self:
			
			origin_node.jump_lines[self] = [index, self.get_index()]
			origin_node._on_block_moved()

# 任何积木移动时，更新jump值
func _on_any_block_moved():
	
	if jump_to:
		jump_index = jump_to.get_index()
		set_jump_dictionary( jump_index )
		%c.text = str( jump_index )
	pass
"

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_kgnm4"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_8jirg"]
bg_color = Color(1, 1, 1, 0.231373)

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_n6hg6"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_k572q"]

[node name="Jump" type="PanelContainer"]
offset_right = 40.0
offset_bottom = 40.0
size_flags_horizontal = 0
size_flags_vertical = 0
theme = ExtResource("1_tx23r")
theme_override_styles/panel = ExtResource("2_kgnm4")
script = SubResource("GDScript_kgnm4")

[node name="HBoxContainer" type="HBoxContainer" parent="."]
layout_mode = 2
theme_override_constants/separation = 10

[node name="Label" type="Label" parent="HBoxContainer"]
layout_mode = 2
text = "     Jump"

[node name="c" type="LineEdit" parent="HBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
theme_override_constants/minimum_character_width = 1
text = "0"
placeholder_text = "to"
expand_to_text_length = true
select_all_on_focus = true

[node name="Label2" type="Label" parent="HBoxContainer"]
layout_mode = 2
text = "if"

[node name="a" type="LineEdit" parent="HBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
text = "x"
expand_to_text_length = true
select_all_on_focus = true

[node name="op1" type="OptionButton" parent="HBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
theme_override_styles/hover_pressed = ExtResource("3_8jirg")
theme_override_styles/hover = ExtResource("3_8jirg")
theme_override_styles/pressed = ExtResource("3_8jirg")
theme_override_styles/normal = ExtResource("3_8jirg")
selected = 1
fit_to_longest_item = false
allow_reselect = true
item_count = 8
popup/item_0/text = "=="
popup/item_0/id = 0
popup/item_1/text = "not"
popup/item_1/id = 1
popup/item_2/text = "<"
popup/item_2/id = 2
popup/item_3/text = "<="
popup/item_3/id = 3
popup/item_4/text = ">"
popup/item_4/id = 4
popup/item_5/text = ">="
popup/item_5/id = 5
popup/item_6/text = "==="
popup/item_6/id = 6
popup/item_7/text = "always"
popup/item_7/id = 7

[node name="b" type="LineEdit" parent="HBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
text = "false"
expand_to_text_length = true
select_all_on_focus = true

[node name="ArrowLeft" type="Button" parent="."]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 0
theme_override_styles/focus = SubResource("StyleBoxEmpty_kgnm4")
theme_override_styles/hover = SubResource("StyleBoxFlat_8jirg")
theme_override_styles/pressed = SubResource("StyleBoxEmpty_n6hg6")
theme_override_styles/normal = SubResource("StyleBoxEmpty_k572q")
icon = ExtResource("4_tx23r")

[node name="Node" type="Node2D" parent="."]

[node name="JumpLine" type="Line2D" parent="Node"]
unique_name_in_owner = true
visible = false
z_index = 1
z_as_relative = false
width = 3.0

[node name="ArrowRight" type="Sprite2D" parent="Node"]
unique_name_in_owner = true
visible = false
z_index = 1
z_as_relative = false
texture = ExtResource("4_tx23r")
flip_h = true

[connection signal="text_changed" from="HBoxContainer/c" to="." method="_on_c_text_changed"]
[connection signal="item_selected" from="HBoxContainer/op1" to="." method="_on_op_1_item_selected"]
[connection signal="button_down" from="ArrowLeft" to="." method="_on_arrow_left_button_down"]
